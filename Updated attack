#include<stdio.h>
#include<stdlib.h>
#include<gmp.h>

// a function to calculate the size of the file
int file_size(FILE*fp)
{
	int size;
	fseek(fp, 0, SEEK_END);
	size = ftell(fp);
	rewind(fp);
	return size;
}
//a function to count the non zero elements in a vector
int count_zero(int vect[], int nz, int vect_sz)
{
	nz=0;
	for(int i=0; i<vect_sz;i++)
	{
		if(vect[i]==0)
		{
			nz++;
		}
	}
	return nz;
}
// a function to clean a vector from the zeros by creating another vector containing all its non zero elements
void cleaning(int vect1[], int vect2[], int nz, int vect_sz)
{
	int j=0;
	for(int i=0;i<nz;i++)
	{
		if(vect1[i]!= 0)
		{
			printf("valeur de vect1 = %d \n",vect1[i]);
			vect2[j] = vect1[i];
			j++;
		}
	}
}

//a function that creates the s_p (or s_q) vector that has 2 U elements that divide p (or q)
//We'll use the elements of this vector for CRT
//this fuction first removes all duplicates and adds the number "2"
int create_vector_for_crt(int vect[],int size)
{
	//on supprime les élements qui se répetent dans la liste
	int i,j,k;
    for(i=0;i<size;i++){
        for(j=i+1;j<size;j++){
            if(vect[i]==vect[j]){
                for ( k = j; k < size - 1; k++)  
                {  
                    vect[k] = vect[k + 1];  
                }  
                size--;  
            // if the position of the elements is changed, don't increase the index j  
                j--;      
            }
        }
    }

    //on ajoute "2" à la fin du vecteur
	size=size+1;
	vect[size-1]=2;

	return size;
}
    
//a function to determine the primes in S_x    
void S_x(int primes[], char vect[], int size, int bla[])
{
	int cntr=0, pr_indx=0,i=0;
	while(cntr<size)
	{
		if(vect[cntr]=='A')
		{
			pr_indx++;
		}
		if(vect[cntr]=='B')
		{
			bla[i]=primes[pr_indx+1];
			i++;
			pr_indx=0;
		}
		cntr++;
	}
}
int main()
{
	FILE* f1,*f2;
	f1=fopen("traces_de_p.txt","r");
	if(f1==NULL){
	    printf("Erreur d'ouverture du fichier \n");
	}
	int size_p=file_size(f1);
	char vect_p[size_p+1];
	fscanf(f1,"%s",vect_p);
	fclose(f1);

	f2=fopen("traces_de_q.txt","r");
	if(f2==NULL){
        printf("Erreur d'ouverture du fichier \n");
    }
	int size_q=file_size(f2);
	char vect_q[size_q+1];
	fscanf(f2,"%s",vect_q);
	fclose(f2);


	int k=54,u;//k can be changed
	int primes[k];
	mpz_t p,q;
	mpz_inits(p,q,NULL);
	for(int i=0;i<k;i++)
	{
		mpz_nextprime(p,q);
		u=mpz_get_ui(p);
		primes[i]=u;
		mpz_set(q,p);
	}
	mpz_clears(p,q,NULL);


	int S_p[k],S_q[k];
	//Initializing S_p and S_q to 0
	for(int i=0;i<k;i++)
	{
		S_p[i]=0;
		S_q[i]=0;
	}
	//getting the values of S_p and S_q
	S_x(primes,vect_p,size_p, S_p);
	S_x(primes,vect_q,size_q, S_q);
	
	//for(int j=0;j<k;j++)
	//{
	//	printf("S_p{%d}=%d \n",j,S_p[j]);
	//}

	int nz_p, nz_q;
	nz_p = 0;
	nz_q = 0;
	int j,produit;
	produit=1;

	//on compte les non-zeros
	nz_p=count_zero(S_p,nz_p,size_p);
	//nz_p est le nombre de non zeros dans l'ensemble S_p
	nz_p=k-nz_p;
	printf("numeros de non zeros dans l'ensemble S_p %d \n",nz_p);

	nz_q=count_zero(S_q,nz_q,size_q);
	//nz_q est le nombre de non zeros dans l'ensemble S_q
	nz_q=k-nz_q;
	printf("numeros de non zeros dans l'ensemble S_q %d \n",nz_q);

	int S_p1[nz_p], S_q1[nz_q];
	cleaning(S_p,S_p1,nz_p,size_p);
	cleaning(S_q,S_q1,nz_q,size_q);

	printf("avant la fonction create \n");
	for(int j=0;j<nz_p;j++)
	{
		printf("S_p1{%d}=%d \n",j,S_p1[j]);
	}
	printf("\n");

	for(int j=0;j<nz_q;j++)
	{
		printf("S_q1{%d}=%d \n",j,S_q1[j]);
	}

	nz_q=create_vector_for_crt(S_q1,nz_q);
	nz_p=create_vector_for_crt(S_p1,nz_p);

	printf("après la fonction create \n");
	for(int j=0;j<nz_p;j++)
	{
		printf("S_p1{%d}=%d \n",j,S_p1[j]);
	}
	printf("\n");
	for(int j=0;j<nz_q;j++)
	{
		printf("S_q1{%d}=%d \n",j,S_q1[j]);
	}
}
